#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon May 31 09:29:19 2021

@author: m2rob
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun May  2 17:23:59 2021

@author: m2rob
"""

# simRemoteApi.start(19999)


import numpy as np
import sim
import time
import math
import matplotlib.pyplot as plt
from control.matlab import *


if __name__ == '__main__':
    
    print ('Program started')
    sim.simxFinish(-1) # just in case, close all opened connections
    clientID=sim.simxStart('127.0.0.1',19999,True,True,5000,5) # Connect to CoppeliaSim

    h=np.array([0,0,0,0,0,0])
    q = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
    

    if clientID!=-1:
        print ('Connected to remote API server')

        # Now try to retrieve data in a blocking fashion (i.e. a service call):
        res,objs=sim.simxGetObjects(clientID,sim.sim_handle_all,sim.simx_opmode_blocking)
        if res==sim.simx_return_ok:
            print ('Number of objects in the scene: ',len(objs))
        else:
            print ('Remote API function call returned with error code: ',res)
            
        # Now retrieve streaming data (i.e. in a non-blocking fashion):
        startTime=time.time()
        sim.simxGetIntegerParameter(clientID,sim.sim_intparam_mouse_x,sim.simx_opmode_streaming) # Initialize streaming
           
        r, h[0]=sim.simxGetObjectHandle(clientID,'UR10_joint1', sim.simx_opmode_blocking)
        r, h[1]=sim.simxGetObjectHandle(clientID,'UR10_joint2', sim.simx_opmode_blocking)
        r, h[2]=sim.simxGetObjectHandle(clientID,'UR10_joint3', sim.simx_opmode_blocking)
        r, h[3]=sim.simxGetObjectHandle(clientID,'UR10_joint4', sim.simx_opmode_blocking)
        r, h[4]=sim.simxGetObjectHandle(clientID,'UR10_joint5', sim.simx_opmode_blocking)
        r, h[5]=sim.simxGetObjectHandle(clientID,'UR10_joint6', sim.simx_opmode_blocking)
        
            
        #############################################################################################################
        #                       Programme de la commande dÃ©bute ici
        #############################################################################################################



    ###
    #Question 1:
    ### 

    def MatrixTransformation(uj):

        uj = [alpha_j-1    a_j-1    theta_j    d_j]

        Rot_x = np.array([
            [1,0,0,0]
            [0,np.cos(alpha_j-1),-np.sin(alpha_j-1),0]
            [0,np.sin(alpha_j-1),np.cos(alpha_j-1),0]
            [0,0,0,1]
            ])  
        

        Trans_x = np.array([
            [1,0,0,a_j-1]
            [0,1,0,0]
            [0,0,1,0]
            [0,0,0,1]
        ])

        Rot_z = np.array([
            [np.cos(theta_j),-np.sin(theta_j),0,0]
            [np.sin(theta_j),np.cos(theta_j),0,0]
            [0,0,1,0,]
            [0,0,0,1]
        ])
    
        Trans_z = np.array([
            [1,0,0,0]
            [0,1,0,0]
            [0,0,1,r_j]
            [0,0,0,1]
        ])

        T = Rot_x * Trans_x * Rot_z * Trans_z

    return T




    else:
        print ('Failed connecting to remote API server')
    print ('Program ended')
